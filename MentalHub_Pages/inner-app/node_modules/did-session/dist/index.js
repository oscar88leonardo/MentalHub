/**
 * Manages user account DIDs in web based environments.
 *
 * ## Purpose
 *
 * Manages, creates and authorizes a DID session key for a user. Returns an authenticated DIDs instance
 * to be used in other Ceramic libraries. Supports did:pkh for blockchain accounts with Sign-In with
 * Ethereum and CACAO for authorization.
 *
 * ## Installation
 *
 * ```sh
 * npm install did-session
 * ```
 *
 * ## Usage
 *
 * Authorize and use DIDs where needed. Import the AuthMethod you need, Ethereum accounts used here for example.
 *
 * ```ts
 * import { DIDSession } from 'did-session'
 * import { EthereumWebAuth, getAccountId } from '@didtools/pkh-ethereum'
 *
 * const ethProvider = // import/get your web3 eth provider
 * const addresses = await ethProvider.enable()
 * const accountId = await getAccountId(ethProvider, addresses[0])
 * const authMethod = await EthereumWebAuth.getAuthMethod(ethprovider, accountId)
 * 
 * const session = await DIDSession.authorize(authMethod, { resources: [...]})
 *
 * // Uses DIDs in ceramic & glaze libraries, ie
 * const ceramic = new CeramicClient()
 * ceramic.did = session.did
 *
 * // pass ceramic instance where needed
 *
 * ```
 *
 * You can serialize a session to store for later and then re-initialize. Currently sessions are valid
 * for 1 day by default.
 *
 * ```ts
 * // Create session as above, store for later
 * const session = await DIDSession.authorize(authMethod, { resources: [...]})
 * const sessionString = session.serialize()
 *
 * // write/save session string where you want (ie localstorage)
 * // ...
 *
 * // Later re initialize session
 * const session2 = await DIDSession.fromSession(sessionString)
 * const ceramic = new CeramicClient()
 * ceramic.did = session2.did
 * ```
 *
 * Additional helper functions are available to help you manage a session lifecycle and the user experience.
 *
 * ```ts
 * // Check if authorized or created from existing session string
 * didsession.hasSession
 *
 * // Check if session expired
 * didsession.isExpired
 *
 * // Get resources session is authorized for
 * didsession.authorizations
 *
 * // Check number of seconds till expiration, may want to re auth user at a time before expiration
 * didsession.expiresInSecs
 * ```
 *
 * ## Configuration
 *
 * The resources your app needs to write access to must be passed during authorization. Resources are an array
 * of Model Stream Ids or Streams Ids. Typically you will just pass resources from `@composedb` libraries as
 * you will already manage your Composites and Models there. For example:
 *
 * ```ts
 * import { ComposeClient } from '@composedb/client'
 *
 * //... Reference above and `@composedb` docs for additional configuration here
 *
 * const client = new ComposeClient({ceramic, definition})
 * const resources = client.resources
 * const session = await DIDSession.authorize(authMethod, { resources })
 * client.setDID(session.did)
 * ```
 *
 * By default a session will expire in 1 day. You can change this time by passing the `expiresInSecs` option to
 * indicate how many seconds from the current time you want this session to expire.
 *
 * ```ts
 * const oneWeek = 60 * 60 * 24 * 7
 * const session = await DIDSession.authorize(authMethod, { resources: [...], expiresInSecs: oneWeek })
 * ```
 *
 * A domain/app name is used when making requests, by default in a browser based environment the library will use
 * the domain name of your app. If you are using the library in a non web based environment you will need to pass
 * the `domain` option otherwise an error will thrown.
 *
 * ```ts
 * const session = await DIDSession.authorize(authMethod, { resources: [...], domain: 'YourAppName' })
 * ```
 *
 * ## Typical usage pattern
 *
 * A typical pattern is to store a serialized session in local storage and load on use if available. Then
 * check that a session is still valid before making writes.
 *
 * **Warning:** LocalStorage is used for illustrative purposes here and may not be best for your app, as
 * there is a number of known issues with storing secret material in browser storage. The session string
 * allows anyone with access to that string to make writes for that user for the time and resources that
 * session is valid for. How that session string is stored and managed is the responsibility of the application.
 *
 * ```ts
 * import { DIDSession } from 'did-session'
 * import type { AuthMethod } from '@didtools/cacao'
 * import { EthereumWebAuth, getAccountId } from '@didtools/pkh-ethereum'
 *
 * const ethProvider = // import/get your web3 eth provider
 * const addresses = await ethProvider.enable()
 * const accountId = await getAccountId(ethProvider, addresses[0])
 * const authMethod = await EthereumWebAuth.getAuthMethod(ethProvider, accountId)
 *
 * const loadSession = async(authMethod: AuthMethod):Promise<DIDSession> => {
 *   const sessionStr = localStorage.getItem('didsession')
 *   let session
 *
 *   if (sessionStr) {
 *     session = await DIDSession.fromSession(sessionStr)
 *   }
 *
 *   if (!session || (session.hasSession && session.isExpired)) {
 *     session = await DIDSession.authorize(authMethod, { resources: [...]})
 *     localStorage.setItem('didsession', session.serialize())
 *   }
 *
 *   return session
 * }
 *
 * const session = await loadSession(authMethod)
 * const ceramic = new CeramicClient()
 * ceramic.did = session.did
 *
 * // pass ceramic instance where needed, ie glaze
 * // ...
 *
 * // before ceramic writes, check if session is still valid, if expired, create new
 * if (session.isExpired) {
 *   const session = loadSession(authMethod)
 *   ceramic.did = session.did
 * }
 *
 * // continue to write
 * ```
 *
 * ## Upgrading from `@glazed/did-session` to `did-session`
 *
 * `authorize` changes to a static method which returns a did-session instance and `getDID()` becomes a `did` getter. For example:
 *
 * ```ts
 * // Before @glazed/did-session
 * const session = new DIDSession({ authProvider })
 * const did = await session.authorize()
 *
 * // Now did-session
 * const session = await DIDSession.authorize(authMethod, { resources: [...]})
 * const did = session.did
 * ```
 *
 * Requesting resources are required now when authorizing, before wildcard (access all) was the default. You can continue to use
 * wildcard by passing the following * below. Wildcard is typically only used with `@glazed` libraries and/or tile documents and
 * it is best to switch over when possible, as the wildcard option may be * deprecated in the future. When using with
 * composites/models you should request the minimum needed resources instead.
 *
 * ```ts
 * const session = await DIDSession.authorize(authMethod, { resources: [`ceramic://*`]})
 * const did = session.did
 * ```
 *
 * ## Upgrading from `did-session@0.x.x` to `did-session@1.x.x`
 *
 * AuthProviders change to AuthMethod interfaces. Similarly you can import the auth libraries you need. How you configure and manage
 * these AuthMethods may differ, but each will return an AuthMethod function to be used with did-session.
 *
 * ```ts
 * // Before with v0.x.x
 * ...
 * import { EthereumAuthProvider } from '@ceramicnetwork/blockchain-utils-linking'
 *
 * const ethProvider = // import/get your web3 eth provider
 * const addresses = await ethProvider.enable()
 * const authProvider = new EthereumAuthProvider(ethProvider, addresses[0])
 * const session = new DIDSession({ authProvider })
 * const did = await session.authorize()
 *
 * // Now did-session@1.0.0
 * ...
 * import { EthereumWebAuth, getAccountId } from '@didtools/pkh-ethereum'
 *
 * const ethProvider = // import/get your web3 eth provider
 * const addresses = await ethProvider.enable()
 * const accountId = await getAccountId(ethProvider, addresses[0])
 * const authMethod = await EthereumWebAuth.getAuthMethod(ethProvider, accountId)
 * const session = await DIDSession.authorize(authMethod, { resources: [...]})
 * const did = session.did
 * ```
 *
 * @module did-session
 */ function _checkPrivateRedeclaration(obj, privateCollection) {
    if (privateCollection.has(obj)) {
        throw new TypeError("Cannot initialize the same private elements twice on an object");
    }
}
function _classApplyDescriptorGet(receiver, descriptor) {
    if (descriptor.get) {
        return descriptor.get.call(receiver);
    }
    return descriptor.value;
}
function _classApplyDescriptorSet(receiver, descriptor, value) {
    if (descriptor.set) {
        descriptor.set.call(receiver, value);
    } else {
        if (!descriptor.writable) {
            throw new TypeError("attempted to set read only private field");
        }
        descriptor.value = value;
    }
}
function _classExtractFieldDescriptor(receiver, privateMap, action) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to " + action + " private field on non-instance");
    }
    return privateMap.get(receiver);
}
function _classPrivateFieldGet(receiver, privateMap) {
    var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get");
    return _classApplyDescriptorGet(receiver, descriptor);
}
function _classPrivateFieldInit(obj, privateMap, value) {
    _checkPrivateRedeclaration(obj, privateMap);
    privateMap.set(obj, value);
}
function _classPrivateFieldSet(receiver, privateMap, value) {
    var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set");
    _classApplyDescriptorSet(receiver, descriptor, value);
    return value;
}
import { Ed25519Provider } from 'key-did-provider-ed25519';
import KeyDidResolver from 'key-did-resolver';
import { randomBytes } from '@stablelib/random';
import { DID } from 'dids';
import * as u8a from 'uint8arrays';
export async function createDIDKey(seed) {
    const didProvider = new Ed25519Provider(seed || randomBytes(32));
    const didKey = new DID({
        provider: didProvider,
        resolver: KeyDidResolver.getResolver()
    });
    await didKey.authenticate();
    return didKey;
}
export async function createDIDCacao(didKey, cacao) {
    const didWithCap = didKey.withCapability(cacao);
    await didWithCap.authenticate();
    return didWithCap;
}
function JSONToBase64url(object) {
    return u8a.toString(u8a.fromString(JSON.stringify(object)), 'base64url');
}
function base64urlToJSON(s) {
    return JSON.parse(u8a.toString(u8a.fromString(s, 'base64url')));
}
function bytesToBase64(b) {
    return u8a.toString(b, 'base64pad');
}
function base64ToBytes(s) {
    return u8a.fromString(s, 'base64pad');
}
var _did = /*#__PURE__*/ new WeakMap(), _keySeed = /*#__PURE__*/ new WeakMap(), _cacao = /*#__PURE__*/ new WeakMap();
/**
 * DID Session
 *
 * ```sh
 * import { DIDSession } from 'did-session'
 * ```
 */ export class DIDSession {
    /**
   * Request authorization for session
   */ static async authorize(authMethod, authOpts = {}) {
        if (!authOpts.resources || authOpts.resources.length === 0) throw new Error('Required: resource argument option when authorizing');
        const authMethodOpts = authOpts;
        const keySeed = randomBytes(32);
        const didKey = await createDIDKey(keySeed);
        authMethodOpts.uri = didKey.id;
        if (authOpts.expiresInSecs) {
            const exp = new Date(Date.now() + authOpts.expiresInSecs * 1000);
            authMethodOpts.expirationTime = exp.toISOString();
        }
        const cacao = await authMethod(authOpts);
        const did = await createDIDCacao(didKey, cacao);
        return new DIDSession({
            cacao,
            keySeed,
            did
        });
    }
    static async initDID(didKey, cacao) {
        const didWithCap = didKey.withCapability(cacao);
        await didWithCap.authenticate();
        return didWithCap;
    }
    /**
   * Get DID instance, if authorized
   */ get did() {
        return _classPrivateFieldGet(this, _did);
    }
    /**
   * Serialize session into string, can store and initalize the same session again while valid
   */ serialize() {
        const session = {
            sessionKeySeed: bytesToBase64(_classPrivateFieldGet(this, _keySeed)),
            cacao: _classPrivateFieldGet(this, _cacao)
        };
        return JSONToBase64url(session);
    }
    /**
   * Initialize a session from a serialized session string
   */ static async fromSession(session) {
        const { sessionKeySeed , cacao  } = base64urlToJSON(session);
        const keySeed = base64ToBytes(sessionKeySeed);
        const didKey = await createDIDKey(keySeed);
        const did = await DIDSession.initDID(didKey, cacao);
        return new DIDSession({
            cacao,
            keySeed,
            did
        });
    }
    get hasSession() {
        return !!_classPrivateFieldGet(this, _cacao) && !!_classPrivateFieldGet(this, _did);
    }
    /**
   * Determine if a session is expired or not
   */ get isExpired() {
        const expTime = _classPrivateFieldGet(this, _cacao).p.exp;
        if (!expTime) return false;
        return Date.parse(expTime) < Date.now();
    }
    /**
   * Number of seconds until a session expires
   */ get expireInSecs() {
        const expTime = _classPrivateFieldGet(this, _cacao).p.exp;
        if (!expTime) throw new Error('Session does not expire') // Removed in future
        ;
        const timeDiff = Date.parse(expTime) - Date.now();
        return timeDiff < 0 ? 0 : timeDiff / 1000;
    }
    /**
   * Get the list of resources a session is authorized for
   */ get authorizations() {
        return _classPrivateFieldGet(this, _cacao)?.p.resources ?? [];
    }
    /**
   * Get the session CACAO
   */ get cacao() {
        return _classPrivateFieldGet(this, _cacao);
    }
    /**
   * Determine if session is available and optionally if authorized for given resources
   */ isAuthorized(resources) {
        if (!this.hasSession || this.isExpired) return false;
        if (!resources) return true;
        return resources.every((val)=>this.authorizations.includes(val));
    }
    /** DID string associated to the session instance. session.id == session.getDID().parent */ get id() {
        return _classPrivateFieldGet(this, _did).parent;
    }
    constructor(params){
        _classPrivateFieldInit(this, _did, {
            writable: true,
            value: void 0
        });
        _classPrivateFieldInit(this, _keySeed, {
            writable: true,
            value: void 0
        });
        _classPrivateFieldInit(this, _cacao, {
            writable: true,
            value: void 0
        });
        _classPrivateFieldSet(this, _keySeed, params.keySeed);
        _classPrivateFieldSet(this, _cacao, params.cacao);
        _classPrivateFieldSet(this, _did, params.did // Remove did init param if/when async didKey authorize is removed
        );
    }
}
